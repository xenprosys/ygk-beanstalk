<?php
namespace Xenprosys\Ygk\Beanstalk\Service;

class BaseJob
{
    public function getData(){}
}

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class BeanstalkWorkerServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BeanstalkWorkerService
     */
    protected $object;
    protected $mock;
    protected $defaults =
            array('servers' =>
                    array('workers' =>
                        array(
                             array('host' => '127.0.0.1', 'port' => 4730)
                    )
                )
            );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mock = $this->getMockBuilder('\Pheanstalk_Pheanstalk', array('ignore', 'getData', 'watch'))
            ->disableOriginalConstructor()
            ->getMock();

        $this->jobMock = $this->getMock('BaseJob', array('getData'));

        $this->mock->expects($this->any())
            ->method('watch')
            ->will($this->returnValue($this->mock));

        $this->mock->expects($this->any())
            ->method('ignore')
            ->will($this->returnValue($this->jobMock));

       $this->object = new BeanstalkWorkerService($this->mock, $this->defaults);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Xenprosys\Ygk\Beanstalk\Service\BeanstalkWorkerService::__construct
     */
    public function testConfiguration()
    {
        $options = array(
            'servers' => array(
                'workers' => array(
                    array('host' => '127.0.0.1', 'port' => 4730),
                    array('host' => '127.0.0.2', 'port' => 4730)
                )
            )
        );

        $this->object = new BeanstalkWorkerService($this->mock, $options);
        $this->assertEquals($options['servers'], $this->object->getOption('servers'));

    }

    /**
     * @covers Xenprosys\Ygk\Beanstalk\Service\BeanstalkWorkerService::dispatch
     */
    public function testDispatch()
    {
        $key = 'test.job';
        $worker = $this->getMock('stdClass', array('execute'));

        $worker->expects($this->once())
            ->method('execute')
            ->will($this->returnValue(true));

        $this->jobMock->expects($this->once())
            ->method('getData')
            ->will($this->returnValue(array(1)));

        $this->object->add($key, $worker);

        $this->mock->expects($this->once())
            ->method('delete')
            ->will($this->returnValue($this->mock));

        $this->object->dispatch();

    }

    /**
     * @covers Xenprosys\Ygk\Beanstalk\Service\BeanstalkWorkerService::dispatch
     */
    public function testDispatchMultipleJobs()
    {
        $key = 'test.job';
        $job = array(1, 2, 3, 4, 5);
        for ($i = 0 ; $i <= 4 ; $i++) {
            $this->object->add($key . $i, $job[$i]);
        }

        $functions = $this->object->getOption('functions');
        $this->assertEquals(5, count($functions));
    }
}
